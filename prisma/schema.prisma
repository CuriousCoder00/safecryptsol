datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name  String
  email String @unique

  image         String?
  accounts      Account[]
  emailVerified DateTime?
  isUserNew     Boolean?  @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  AC            AC[]
  wallets       Wallet[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model AC {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  name      String
  mnemonics String[]
  seed      String

  acN Int

  wallets Wallet[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wallet {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  acId   String? @unique @map("_acId") @db.ObjectId
  userId String? @map("_userId") @db.ObjectId
  name   String

  publicKey  String
  privateKey String

  balance  Float?
  currency String?

  ac   AC?   @relation(fields: [acId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
